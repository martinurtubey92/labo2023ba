# limpio la memoria
rm(list = ls()) # Borro todos los objetos
gc() # Garbage Collection

require("data.table")
require("rpart")

# Parameters for the experiment
PARAM <- list()
PARAM$experimento <- 3210
PARAM$semilla <- 102191

# Define hyperparameters to test
cp_values <- c(-1, -1, -1, -1, -1, -1, -1)
minsplit_values <- c(50, 100, 250, 500, 750, 750, 1000)
minbucket_values <- c(5, 20, 20, 10, 5, 100, 20)
maxdepth_values <- c(8, 14, 10, 6, 14, 8, 6)

# Create a matrix of hyperparameters to iterate through
hyperparameters <- data.frame(
  cp = cp_values,
  minsplit = minsplit_values,
  minbucket = minbucket_values,
  maxdepth = maxdepth_values
)

# Other parameters
PARAM$feature_fraction <- 0.5
PARAM$num_trees_max <- 500

# Set the working directory
setwd("~/buckets/b1/") # Establezco el Working Directory

# Load the dataset
dataset <- fread("./datasets/dataset_pequeno.csv")

# Create the experiment folder
dir.create("./exp/", showWarnings = FALSE)
carpeta_experimento <- paste0("./exp/KA", PARAM$experimento, "/")
dir.create(paste0("./exp/KA", PARAM$experimento, "/"),
  showWarnings = FALSE
)

setwd(carpeta_experimento)

# Sizes of ensemble to save to disk
grabar <- c(1, 5, 10, 50, 100, 200, 500)

# Define training and application datasets
dtrain <- dataset[foto_mes == 202107]
dapply <- dataset[foto_mes == 202109]
dapply[, prob_acumulada := 0]

# Fields for prediction
campos_buenos <- copy(setdiff(colnames(dtrain), c("clase_ternaria")))

# Iterate through hyperparameters
for (param_row in 1:nrow(hyperparameters)) {
  # Set hyperparameters for this iteration
  PARAM$rpart_param <- list(
    "cp" = hyperparameters$cp[param_row],
    "minsplit" = hyperparameters$minsplit[param_row],
    "minbucket" = hyperparameters$minbucket[param_row],
    "maxdepth" = hyperparameters$maxdepth[param_row]
  )
  
  # Generate model outputs
  set.seed(PARAM$semilla) # Establezco la semilla aleatoria

  for (arbolito in 1:PARAM$num_trees_max) {
    qty_campos_a_utilizar <- as.integer(length(campos_buenos) * PARAM$feature_fraction)

    campos_random <- sample(campos_buenos, qty_campos_a_utilizar)

    # Convert vector to a string with elements separated by "+"
    campos_random <- paste(campos_random, collapse = " + ")

    # Build the formula for rpart
    formulita <- paste0("clase_ternaria ~ ", campos_random)

    # Generate the decision tree model
    modelo <- rpart(formulita,
      data = dtrain,
      xval = 0,
      control = PARAM$rpart_param
    )

    # Apply the model to data without class
    prediccion <- predict(modelo, dapply, type = "prob")

    dapply[, prob_acumulada := prob_acumulada + prediccion[, "BAJA+2"]]

    if (arbolito %in% grabar) {
      # Generate the Kaggle submission
      umbral_corte <- (1 / 40) * arbolito
      entrega <- as.data.table(list(
        "numero_de_cliente" = dapply[, numero_de_cliente],
        "Predicted" = as.numeric(dapply[, prob_acumulada] > umbral_corte)
      )) # Generate the output

      nom_arch <- paste0(
        "KA", PARAM$experimento, "_",
        sprintf("%.3d", arbolito), # to have leading zeros
        ".csv"
      )
      fwrite(entrega,
        file = nom_arch,
        sep = ","
      )

      cat(arbolito, " ")
    }
  }
}
